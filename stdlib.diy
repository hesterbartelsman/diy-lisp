;; Some logical operators.

;; but these are odd. what about when in the 'not definition' b isn't false, but;; true?

(define not
    (lambda (b)
        (if b #f #t)))

(define and
	(lambda (a b)
		(if a #t (if b #t) #t)))

(define xor
	(lambda (a b)
		(if a #t (if b #f) #t)))

;; or not finished
(define or
	(lambda (a b)
		(if a #t ())))
    	 
(define goe
	(lambda (a b)
		(if b>a or b=a #t))) 

(define loe
	(lambda (a b)
		(if b<a or b=a #t)))

(define greater
	(lambda (a b)
		(if b>a #t)))

(define less
	(lambda (a b)
		(if b<a #t)))



;; DIY -- Implement the rest of your standard library
;; here as part 7 of the workshop.
